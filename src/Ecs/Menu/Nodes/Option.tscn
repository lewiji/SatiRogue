[gd_scene load_steps=14 format=2]

[ext_resource path="res://src/Ecs/Menu/Nodes/OptionUnchecked.tres" type="Texture" id=1]
[ext_resource path="res://src/Ecs/Menu/Nodes/OptionChecked.tres" type="Texture" id=2]
[ext_resource path="res://src/Ecs/Menu/Nodes/OptionBgStylebox.tres" type="StyleBox" id=3]
[ext_resource path="res://src/Ecs/Menu/Nodes/OptionFont.tres" type="DynamicFont" id=4]
[ext_resource path="res://src/Ecs/Menu/Nodes/OptionUnderStylebox.tres" type="StyleBox" id=5]
[ext_resource path="res://src/Ecs/Menu/Nodes/OptionUnderStyleboxHover.tres" type="StyleBox" id=6]
[ext_resource path="res://src/Ecs/Menu/Nodes/OptionUnderStyleboxHoverPressed.tres" type="StyleBox" id=7]
[ext_resource path="res://src/Ecs/Menu/Nodes/OptionUnderStyleboxPressed.tres" type="StyleBox" id=8]
[ext_resource path="res://src/Ecs/Menu/Nodes/OptionFocus.tres" type="StyleBox" id=9]
[ext_resource path="res://src/Ecs/Menu/Nodes/OptionUncheckedDisabled.tres" type="Texture" id=10]
[ext_resource path="res://src/Ecs/Menu/Nodes/OptionCheckedDisabled.tres" type="Texture" id=11]
[ext_resource path="res://src/Ecs/Menu/Nodes/OptionUnderStyleboxDisabled.tres" type="StyleBox" id=12]

[sub_resource type="CSharpScript" id=5]
script/source = "using System;
using Godot;
using Godot.Collections;
using GodotOnReady.Attributes;
using SatiRogue.Ecs.Menu.Nodes;
using World = RelEcs.World;

namespace SatiRogue.Ecs.Loading.Nodes; 

[Tool]
public partial class Option : Control {
   public enum OptionType { ProjectSetting, EnvironmentSetting }
   
   [OnReadyGet(\"%CheckBox\")] private CheckBox _checkBox = null!;
   private string _label = \"\";
   
   [Export] public string OptionLabel {
      get => _label;
      set {
         _label = value;
         if (IsInsideTree()) {
            _checkBox.Text = _label;
         }
      }
   }
   
   [Export] public OptionType OptionLocation { get; set; }
   
   [Export] public string OptionKey { get; set; } = \"\";

   [OnReady] private void SetLabelState() {
      _checkBox.Text = _label;
   }

   [OnReady] private void ConnectCheckbox() {
      _checkBox.Connect(\"toggled\", this, nameof(OnCheckboxToggled));
   }

   private void OnCheckboxToggled(bool pressed) {
      Owner.EmitSignal(nameof(Options.OptionChanged), (int)OptionLocation, new Dictionary{{OptionKey, pressed}});
   }
}"

[node name="Option" type="PanelContainer"]
margin_right = 328.0
margin_bottom = 49.0
rect_min_size = Vector2( 300, 36 )
custom_styles/panel = ExtResource( 3 )
script = SubResource( 5 )
OptionLabel = "?????"

[node name="CheckBox" type="CheckBox" parent="."]
unique_name_in_owner = true
light_mask = 3
margin_left = 20.0
margin_top = 12.0
margin_right = 308.0
margin_bottom = 48.0
rect_min_size = Vector2( 0, 30 )
size_flags_horizontal = 3
custom_colors/font_color_disabled = Color( 0, 0, 0, 1 )
custom_colors/font_color_hover_pressed = Color( 0.356863, 0.709804, 0, 1 )
custom_colors/font_color = Color( 0.964706, 0.341176, 0.341176, 1 )
custom_colors/font_color_hover = Color( 1, 0.466667, 0.235294, 1 )
custom_colors/font_color_pressed = Color( 1, 0.572549, 0.243137, 1 )
custom_constants/hseparation = 16
custom_fonts/font = ExtResource( 4 )
custom_icons/checked_disabled = ExtResource( 11 )
custom_icons/checked = ExtResource( 2 )
custom_icons/unchecked_disabled = ExtResource( 10 )
custom_icons/unchecked = ExtResource( 1 )
custom_styles/hover = ExtResource( 6 )
custom_styles/pressed = ExtResource( 8 )
custom_styles/focus = ExtResource( 9 )
custom_styles/disabled = ExtResource( 12 )
custom_styles/hover_pressed = ExtResource( 7 )
custom_styles/normal = ExtResource( 5 )
text = "?????"
